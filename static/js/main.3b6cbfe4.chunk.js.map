{"version":3,"sources":["components/Square.js","components/Board.js","components/GameHome.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","style","cursor","onClick","value","Board","renderSquare","i","matrix","createBoard","size","board","row","j","push","this","Component","dimensions","label","GameHome","selectionBox","options","dim","onSubmit","handleChange","onChange","e","preventDefault","setDimension","target","shuffleArray","length","myArray","Array","fill","map","_","index","sort","Math","random","Winner","score","initialState","noOfSteps","gameStarted","gameStatus","Game","state","dimension","parseInt","setState","handleClick","floor","col","restart","arr","filter","a","array","JSON","stringify","calculateWinner","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wPAQgBA,MANhB,SAAgBC,GACf,OACC,yBAAKC,MAAO,CAACC,OAAO,WAAYC,QAASH,EAAMG,SAAUH,EAAMI,QCgClDC,E,4MA9BdC,aAAe,SAACC,GACf,OACC,kBAAC,EAAD,CAAQH,MAAO,EAAKJ,MAAMQ,OAAOD,GAAIJ,QAAS,kBAAI,EAAKH,MAAMG,QAAQI,O,EAIvEE,YAAc,WAIb,IAHA,IAAMC,EAAO,EAAKV,MAAMU,KAEpBC,EAAQ,GACJJ,EAAE,EAAGA,EAAEG,EAAKA,EAAMH,GAAGG,EAAM,CAElC,IADA,IAAIE,EAAM,GACFC,EAAEN,EAAGM,EAAEN,EAAEG,EAAMG,IACtBD,EAAIE,KAAK,4BAAK,EAAKR,aAAaO,KAEjCF,EAAMG,KAAK,4BAAKF,IAEjB,OAAOD,G,uDAKP,OACA,+BACCI,KAAKN,mB,GA3BYO,a,OCDdC,EAAa,CACnB,CACCC,MAAO,MACPd,MAAO,GAER,CACCc,MAAO,MACPd,MAAO,GAER,CACCc,MAAO,MACPd,MAAO,GAER,CACCc,MAAO,MACPd,MAAO,IA+BOe,E,4MAxBdC,aAAe,WACd,IADoB,EAChBC,EAAU,CAAC,uDADK,cAELJ,GAFK,IAEpB,IAAI,EAAJ,qBAA2B,CAAC,IAApBK,EAAmB,QAC1BD,EAAQP,KAAK,4BAAQV,MAAOkB,EAAIlB,OAAQkB,EAAIJ,SAHzB,8BAKpB,OAAQ,4BAAQK,SAAU,EAAKC,aAAcC,SAAU,EAAKD,cAAeH,I,EAG5EG,aAAe,SAACE,GACfA,EAAEC,iBACF,EAAK3B,MAAM4B,aAAaF,EAAEG,OAAOzB,Q,uDAKjC,OACA,6BACA,wDAAoC,6BACnCW,KAAKK,oB,GApBeJ,aCFvB,IAAMc,EAAe,SAACpB,GACrB,IAAIqB,EAASrB,EAAKA,EAAK,EACnBsB,EAAUC,MAAMF,GAAQG,KAAK,GAAGC,KAAI,SAACC,EAAEC,GAC1C,OAAOA,EAAM,KAId,OAFAL,EAAQD,GAAU,KAClBC,EAAUA,EAAQM,MAAK,kBAAMC,KAAKC,SAAS,OAI5C,SAASC,EAAOzC,GACf,OACC,6BACA,wCACA,qCAAWA,EAAM0C,OACjB,4BAAQvC,QAASH,EAAMG,SAAvB,YAKF,IAAMwC,EAAe,CACpBjC,KAAM,KACNF,OAAQ,KACRoC,UAAW,EACXC,aAAa,EACbC,YAAY,GA0EGC,E,4MArEfC,MAAQL,E,EAcRf,aAAe,SAACqB,GACf,IAAMvC,EAAOwC,SAASD,GACtB,EAAKE,SAAS,CACbzC,KAAMA,EACNF,OAAQsB,EAAapB,GACrBmC,aAAa,K,EAIfO,YAAc,SAAC7C,GACd,IAAMC,EAAS,EAAKwC,MAAMxC,OACpBE,EAAO,EAAKsC,MAAMtC,KAExB,GAAc,MAAXF,EAAOD,GAAV,CAGA,IAAMK,EAAM2B,KAAKc,MAAM9C,EAAEG,GACnB4C,EAAM/C,EAAEG,EAEd,GAAG4C,EAAI,GAAkB,MAAb9C,EAAOD,EAAE,GAAS,CAAC,IAAD,EACH,CAACC,EAAOD,EAAE,GAAIC,EAAOD,IAA9CC,EAAOD,GADqB,KAClBC,EAAOD,EAAE,GADS,UAEvB,GAAG+C,EAAI5C,EAAK,GAAkB,MAAbF,EAAOD,EAAE,GAAU,CAAC,IAAD,EAChB,CAACC,EAAOD,EAAE,GAAIC,EAAOD,IAA9CC,EAAOD,GADkC,KAC/BC,EAAOD,EAAE,GADsB,UAEpC,GAAGK,EAAI,GAAqB,MAAhBJ,EAAOD,EAAEG,GAAa,CAAC,IAAD,EACX,CAACF,EAAOD,EAAEG,GAAOF,EAAOD,IAApDC,EAAOD,GADgC,KAC7BC,EAAOD,EAAEG,GADoB,UAElC,GAAGE,EAAIF,EAAK,GAAqB,MAAhBF,EAAOD,EAAEG,GAAa,CAAC,IAAD,EAChB,CAACF,EAAOD,EAAEG,GAAOF,EAAOD,IAApDC,EAAOD,GADqC,KAClCC,EAAOD,EAAEG,GADyB,KAK9C,EAAKyC,SAAS,CACbP,UAAW,EAAKI,MAAMJ,UAAY,EAClCpC,OAAQA,M,EAIV+C,QAAU,WACT,EAAKJ,SAASR,I,oEAhDgB,IAA3B5B,KAAKiC,MAAMH,cAAmD,IAA1B9B,KAAKiC,MAAMF,aAjDpD,SAAyBtC,EAAQE,GAChC,IAAM8C,EAAMhD,EAAOiD,QAAO,SAACC,GAC1B,OAAOA,KAIJC,EAAQ1B,MADCvB,EAAKA,EAAK,GACGwB,KAAK,GAAGC,KAAI,SAACC,EAAEC,GACxC,OAAOA,EAAM,KAGd,OAAGuB,KAAKC,UAAUL,KAASI,KAAKC,UAAUF,GA0C1BG,CAAgB/C,KAAKiC,MAAMxC,OAAQO,KAAKiC,MAAMtC,OAE5DK,KAAKoC,SAAS,CACbL,YAAY,O,+BA8Cd,IAAMtC,EAASO,KAAKiC,MAAMxC,OAE1B,OACC,8BACEO,KAAKiC,MAAMH,aAAgB,kBAAC,EAAD,CAAUjB,aAAcb,KAAKa,gBAExDb,KAAKiC,MAAMF,YAAe,kBAAC,EAAD,CAAOpC,KAAMK,KAAKiC,MAAMtC,KAAMF,OAAQA,EAAQL,QAASY,KAAKqC,cAEvFrC,KAAKiC,MAAMF,YAAe,kBAACL,EAAD,CAAQtC,QAASY,KAAKwC,QAASb,MAAO3B,KAAKiC,MAAMJ,iB,GAjE5D5B,aClCJ+C,MAVf,WACE,OACE,yBAAKC,UAAU,OACf,yBAAKA,UAAU,cACf,kBAAC,EAAD,SCIgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3b6cbfe4.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Square(props) {\n\treturn(\n\t\t<div style={{cursor:\"pointer\"}} onClick={props.onClick}>{props.value}</div>\n\t\t)\n\t}\n\n\texport default Square;","import React, {Component} from 'react';\nimport Square from './Square'\n\nclass Board extends Component {\n\n\n\trenderSquare = (i) => {\n\t\treturn(\n\t\t\t<Square value={this.props.matrix[i]} onClick={()=>this.props.onClick(i)}/>\n\t\t\t)\n\t}\n\n\tcreateBoard = () => {\n\t\tconst size = this.props.size;\n\n\t\tlet board = [];\n\t\tfor(let i=0; i<size*size; i+=size) {\n\t\t\tlet row = [];\n\t\t\tfor(let j=i; j<i+size; j++) {\n\t\t\t\trow.push(<td>{this.renderSquare(j)}</td>)\n\t\t\t}\n\t\t\tboard.push(<tr>{row}</tr>)\n\t\t}\n\t\treturn board;\n\t}\n\n\n\trender() {\n\t\treturn(\n\t\t<table>\n\t\t{this.createBoard()}\n\t\t</table>\n\t\t)\n\t}\n}\n\nexport default Board;","import React, {Component} from 'react';\n\nconst dimensions = [\n{\n\tlabel: '3*3',\n\tvalue: 3\n},\n{\n\tlabel: '4*4',\n\tvalue: 4\n},\n{\n\tlabel: '5*5',\n\tvalue: 5\n},\n{\n\tlabel: '6*6',\n\tvalue: 6\n},\n]\n\n\nclass GameHome extends Component {\n\n\tselectionBox = () => {\n\t\tlet options = [<option>choose a dimension</option>]\n\t\tfor(let dim of dimensions) {\n\t\t\toptions.push(<option value={dim.value}>{dim.label}</option>)\n\t\t}\n\t\treturn (<select onSubmit={this.handleChange} onChange={this.handleChange}>{options}</select>)\n\t}\n\n\thandleChange = (e) => {\n\t\te.preventDefault();\n\t\tthis.props.setDimension(e.target.value)\n\t}\n\n\trender() {\n\n\t\treturn(\n\t\t<div>\n\t\t<label>Select Game Dimension</label><br/>\n\t\t{this.selectionBox()}\n\t\t</div>\n\t\t)\n\t}\n}\n\nexport default GameHome;","import React, {Component} from 'react';\nimport Board from './Board';\nimport GameHome from './GameHome';\n\nfunction calculateWinner(matrix, size) {\n\tconst arr = matrix.filter((a) => {\n\t\treturn a;\n\t});\n\n\tlet length = size*size-1;\n\tlet array = Array(length).fill(0).map((_,index) => {\n\t\treturn index+1;\n\t});\n\n\tif(JSON.stringify(arr) === JSON.stringify(array)){\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nconst shuffleArray = (size) => {\n\tlet length = size*size-1;\n\tlet myArray = Array(length).fill(0).map((_,index) => {\n\t\treturn index+1;\n\t});\n\tmyArray[length] = null; \n\tmyArray = myArray.sort(() => Math.random()-0.5)\n\treturn myArray;\n}\n\nfunction Winner(props) {\n\treturn(\n\t\t<div>\n\t\t<p>Game Over</p>\n\t\t<p>Score: {props.score}</p>\n\t\t<button onClick={props.onClick}>Restart</button>\n\t\t</div>\n\t\t)\n}\n\nconst initialState = {\n\tsize: null,\n\tmatrix: null,\n\tnoOfSteps: 0,\n\tgameStarted: false,\n\tgameStatus: false\n}\n\nclass Game extends Component {\n\n\tstate = initialState;\n\n\tcomponentDidUpdate() {\n\t\tif(this.state.gameStarted === false || this.state.gameStatus === true) \n\t\t\treturn;\n\n\t\tconst winner = calculateWinner(this.state.matrix, this.state.size)\n\t\tif(winner) {\n\t\t\tthis.setState({\n\t\t\t\tgameStatus: true\n\t\t\t});\n\t\t}\n\t}\n\n\tsetDimension = (dimension) => {\n\t\tconst size = parseInt(dimension)\n\t\tthis.setState({\n\t\t\tsize: size,\n\t\t\tmatrix: shuffleArray(size),\n\t\t\tgameStarted: true\n\t\t})\n\t}\n\n\thandleClick = (i) => {\n\t\tconst matrix = this.state.matrix;\n\t\tconst size = this.state.size;\n\n\t\tif(matrix[i]==null)\n\t\t\treturn;\n\n\t\tconst row = Math.floor(i/size);\n\t\tconst col = i%size; \n\n\t\tif(col>0 && matrix[i-1]==null){\n\t\t\t[matrix[i],matrix[i-1]] = [matrix[i-1], matrix[i]]\n\t\t} else if(col<size-1 && matrix[i+1]==null) {\n\t\t\t[matrix[i],matrix[i+1]] = [matrix[i+1], matrix[i]]\n\t\t} else if(row>0 && matrix[i-size]==null) {\n\t\t\t[matrix[i],matrix[i-size]] = [matrix[i-size], matrix[i]]\n\t\t} else if(row<size-1 && matrix[i+size]==null) {\n\t\t\t[matrix[i],matrix[i+size]] = [matrix[i+size], matrix[i]]\n\t\t}\n\n\n\t\tthis.setState({\n\t\t\tnoOfSteps: this.state.noOfSteps + 1,\n\t\t\tmatrix: matrix\n\t\t});\t\t\n\t}\n\n\trestart = () => {\n\t\tthis.setState(initialState)\n\t}\n\n\trender(){\n\t\tconst matrix = this.state.matrix;\n\n\t\treturn(\n\t\t\t<div>\n\t\t\t{!this.state.gameStarted && (<GameHome setDimension={this.setDimension} />)}\n\n\t\t\t{!this.state.gameStatus && (<Board size={this.state.size} matrix={matrix} onClick={this.handleClick}/>)}\n\n\t\t\t{this.state.gameStatus && (<Winner onClick={this.restart} score={this.state.noOfSteps}/>)}\n\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n\n\texport default Game;","import React from 'react';\nimport './App.css';\nimport Game from './components/Game'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <div className=\"App-header\">\n    <Game/>\n    </div>\n    </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}